<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans|Righteous&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
  </head>
  <body>
    <div id="textwrapper">
      <input id="linkinput" type="text" class="form-control rounded" placeholder="Youtube Link">
    </div>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>
    <div id="controls">
      <button id="play" type="button" class="btn btn-default" aria-label="Left Align">
        <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
      </button>
      <button id="pause" type="button" class="btn btn-default" aria-label="Left Align">
        <span class="glyphicon glyphicon-pause" aria-hidden="true"></span>
      </button>
      <div id="progressbar" class="progress" style="width:1150px; float:right; height:34px; background: #444">
        <div id="innerprogbar" class="progress-bar progress-bar-danger active" role="progressbar" style="width:75%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
      </div>
    </div>

    <script src="socket.io/socket.io.js"></script>
    <script>
      var socket = io();

      const urlParams = new URLSearchParams(window.location.search);
      var v = 'OCe-6UprFGo';

      var innerprogbar = document.getElementById("innerprogbar");
      
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '724',
          width: '1280',
          videoId: v,
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          },
          playerVars: {
            modestbranding: 1,
            controls: 0,
            disablekb: 1
          }
        });
        setInterval(function() {
          var prog = player.getCurrentTime()/player.getDuration();
          innerprogbar.style.width = prog*1150 + "px";
        }, 200);
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        // event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        /*
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
        */
      }
      function stopVideo() {
        player.stopVideo();
      }

      function parseLink(url) {
        if (url.includes(".be")){
          v = url.split("/").pop();
        } else {
          v = url.split("v=")[1];
        }
        if (v.length > 0){
          player.loadVideoById(v);
        }
      }

      var play = document.getElementById("play");
      var pause = document.getElementById("pause");
      var progressbar = document.getElementById("progressbar");
      var linkinput = document.getElementById("linkinput");

      play.addEventListener("click", function(){
        player.playVideo();
        socket.emit('play', 'client has pressed play');
      });

      pause.addEventListener("click", function() {
        player.pauseVideo();
        socket.emit('pause', 'client has pressed pause');
      });

      progressbar.addEventListener("click", function() {
        var x = $(this).offset();
        var pos = event.pageX - x.left;
        innerprogbar.style.width = pos + 'px';
        player.seekTo(pos/1150*player.getDuration());
        socket.emit('seek', pos);
      });

      linkinput.addEventListener("keypress", function(e){
        if (e.key == "Enter"){
          parseLink(this.value);
          socket.emit('newlink', this.value);
        }
      });

      socket.on('returnplay', function(msg){
        player.playVideo();
      })

      socket.on('returnpause', function(msg){
        player.pauseVideo();
      })

      socket.on('returnseek', function(pos){
        player.seekTo(pos/1150*player.getDuration())
      })

      socket.on('returnlink', function(url){
        parseLink(url);
        linkinput.value = url;
      })

    </script>
  </body>
</html>
